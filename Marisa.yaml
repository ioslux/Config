# mihomo (Clash Meta) 懒人配置
# 版本：v1.19.4
# 作者：Kwisma
# 频道：https://t.me/Marisa_kristi
# 配置：https://cdn.jsdmirror.cn/gh/Kwisma/cf-worker-mihomo@main/main/Config/Mihomo.yaml
# Github：https://github.com/Kwisma/cf-worker-mihomo
# 修改自官方示例规则 https://wiki.metacubex.one/example/#meta
# 不理解的地方建议对照 虚空终端 (Clash Meta) Docs 进行理解
# 虚空终端 (Clash Meta) Docs 地址: https://wiki.metacubex.one
# 转载请保留此注释测
# 注意：必须关闭 DNS 覆写才能防止 DNS 泄漏 

# ------------------------------------------------------------
# 锚点区
proxy: &proxy { type: select, include-all-providers: true, proxies: [🚀全球代理, 🎯全球直连, ♻️自动选择, ⚡️均衡负载, 🔯故障转移, 🇭🇰香港自动, 🇹🇼台湾自动, 🇯🇵日本自动, 🇺🇸美国自动, 🇸🇬新加坡自动, 🇬🇧英国自动, 🇩🇪德国自动, 🇫🇷法国自动, 🇨🇦加拿大自动, 🇦🇺澳大利亚自动, 🇰🇷韩国自动, 🇷🇺俄罗斯自动, 🇳🇱荷兰自动, 🇮🇳印度自动, 🇲🇾马来西亚自动, 🇵🇱波兰自动, 🇪🇪爱沙尼亚自动, 🇦🇪阿联酋自动, 🇳🇬尼日利亚自动, 🇧🇬保加利亚自动, 🇸🇨塞舌尔自动, 🇪🇸西班牙自动, 🇻🇳越南自动, 🇸🇽荷属圣马丁自动, 🇲🇴澳门自动, 🇵🇭菲律宾自动, 🇹🇭泰国自动, 🇲🇳蒙古自动, 🇫🇮芬兰自动, 🇸🇪瑞典自动, 🇦🇹奥地利自动, 🇧🇷巴西自动, 🇰🇿哈萨克斯坦自动, 🇮🇱以色列自动, 🇦🇪阿拉伯联合酋长国自动,  🇨🇭瑞士自动, 🌐其它地区] }
direct: &direct { type: select, include-all-providers: true, proxies: [🎯全球直连, 🚀全球代理, ♻️自动选择, ⚡️均衡负载, 🔯故障转移, 🇭🇰香港自动, 🇹🇼台湾自动, 🇯🇵日本自动, 🇺🇸美国自动, 🇸🇬新加坡自动, 🇬🇧英国自动, 🇩🇪德国自动, 🇫🇷法国自动, 🇨🇦加拿大自动, 🇦🇺澳大利亚自动, 🇰🇷韩国自动, 🇷🇺俄罗斯自动, 🇳🇱荷兰自动, 🇮🇳印度自动, 🇲🇾马来西亚自动, 🇵🇱波兰自动, 🇪🇪爱沙尼亚自动, 🇦🇪阿联酋自动, 🇳🇬尼日利亚自动, 🇧🇬保加利亚自动, 🇸🇨塞舌尔自动, 🇪🇸西班牙自动, 🇻🇳越南自动, 🇸🇽荷属圣马丁自动, 🇲🇴澳门自动, 🇵🇭菲律宾自动, 🇹🇭泰国自动, 🇲🇳蒙古自动, 🇫🇮芬兰自动, 🇸🇪瑞典自动, 🇦🇹奥地利自动, 🇧🇷巴西自动, 🇰🇿哈萨克斯坦自动, 🇮🇱以色列自动, 🇦🇪阿拉伯联合酋长国自动,  🇨🇭瑞士自动, 🌐其它地区] }
ipcidr_mrs: &ipcidr_mrs { type: http, interval: 86400, behavior: ipcidr, format: mrs, proxy: 🎯全球直连 }
domain_mrs: &domain_mrs { type: http, interval: 86400, behavior: domain, format: mrs, proxy: 🎯全球直连 }
# 延迟检测 URL
p: &p
  type: http
  interval: 3600 # 更新provider的时间
  size-limit: 0 # 限制下载文件的最大大小，默认为 0 即不限制文件大小，单位为字节 (b)
  header: # 自定义 http 请求头
    User-Agent:
      - meta;clash.meta;Clash/v1.18.0;clash
  health-check: # 健康检查 (延迟测试)
    enable: true
    url: https://www.gstatic.com/generate_204 # 健康检查测试地址
    interval: 300 # 健康检查间隔
    timeout: 5000 # 健康检查超时时间
    lazy: true # 懒惰状态
override: &override
  tfo: false # 启用 TCP Fast Open, 仅生效于 TCP 协议
  mptcp: false # 启用 TCP Multi Path, 仅生效于 TCP 协议
  udp: true # 是否允许 UDP 通过代理，默认为 false
  udp-over-tcp: false # 启用 UDP over TCP，默认 false
  skip-cert-verify: true # 跳过证书验证，仅适用于使用 tls 的协议
  ip-version: ipv4-prefer # 可选：dual/ipv4/ipv6/ipv4-prefer/ipv6-prefer ,默认使用 dual, ipv4: 仅使用 IPv4, ipv6: 仅使用 IPv6, ipv4-prefer: 优先使用 IPv4，对于 TCP 会进行双栈解析，并发链接但是优先使用 IPv4 链接，UDP 则为双栈解析，获取结果中的第一个 IPv4, ipv6-prefer:优先使用 IPv6，对于 TCP 会进行双栈解析，并发链接但是优先使用 IPv6 链接，UDP 则为双栈解析，获取结果中的第一个 IPv6
# URL 测试配置
u: &u
  type: url-test # 测试类型
  tolerance: 1 # 自动选择切换容差
  strategy: consistent-hashing # 负载均衡策略
  url: https://www.gstatic.com/generate_204 #健康检查测试地址
  interval: 300 #健康检查间隔，如不为 0 则启用定时测试，单位为秒
  lazy: true # 懒惰状态
  timeout: 5000 # 健康检查超时时间，单位为毫秒
  max-failed-times: 5 # 最大失败次数，超过则触发一次强制健康检查，默认 5
  include-all-providers: true # 引入所有代理集合

######################## start ########################
# 订阅链接配置区
proxy-providers:
  # 第一个代理提供者
  provider1:
    <<: *p # 继承通用配置
    url: [订阅链接]
    path: ./proxies/provider1.yaml
    override:
      <<: *override
      additional-suffix: ' 1' # 节点名添加后缀

#  provider2:
#    <<: *p # 继承通用配置
#    url: [订阅链接]
#    path: ./proxies/provider2.yaml
#    override:
#      <<: *override
#      additional-suffix: ' 2' # 节点名添加后缀

######################## end ########################

#redir-port: 7891 # 重定向端口，用于透明代理
#tproxy-port: 1536 # TProxy 端口，支持 TUN 模式

port: 7892 # HTTP 代理端口
socks-port: 7893 # SOCKS5 代理端口
mixed-port: 7890 # HTTP/SOCKS 混合代理端口
allow-lan: true # 允许局域网设备连接代理
bind-address: "*" # 绑定地址，默认为所有 IP 地址
#authentication:
#  - "username:password" # HTTP/SOCKS 代理认证，格式为 用户名:密码
#skip-auth-prefixes:
#  - 127.0.0.1/8 # 跳过本地地址的认证
#  - ::1/128 # 跳过 IPv6 本地地址的认证
#lan-allowed-ips:
#  - 0.0.0.0/0 # 允许局域网访问的 IP 地址范围 (IPv4)
#  - ::/0 # 允许局域网访问的 IP 地址范围 (IPv6)
#lan-disallowed-ips:
#  - 192.168.0.3/32 # 局域网禁止访问的特定 IP 地址

# always 开启，强制匹配所有进程
# strict 默认，由 Clash 判断是否开启
# off 不匹配进程，推荐在路由器上使用此模式
find-process-mode: off
mode: rule # 工作模式为规则模式
geodata-mode: false # 更改 geoip 使用文件，mmdb 或者 dat，可选 true/false,true为 dat
# standard：标准加载器
# memconservative：专为内存受限 (小内存) 设备优化的加载器 (默认值)
geodata-loader: memconservative
geox-url: # Geo 数据库配置，用于地理位置和 ASN 匹配
  geoip: "https://cdn.jsdmirror.cn/gh/MetaCubeX/meta-rules-dat@release/geoip.dat" # GeoIP 数据库
  geosite: "https://cdn.jsdmirror.cn/gh/MetaCubeX/meta-rules-dat@release/geosite.dat" # GeoSite 数据库
  mmdb: "https://cdn.jsdmirror.cn/gh/MetaCubeX/meta-rules-dat@release/geoip.metadb" # GeoIP mmdb 数据库
  asn: "https://cdn.jsdmirror.cn/gh/MetaCubeX/meta-rules-dat@release/GeoLite2-ASN.mmdb" # ASN 数据库
geo-auto-update: false # 开启自动更新 Geo 数据库
geo-update-interval: 24 # Geo 数据库更新间隔 (单位: 小时)
# GeoSite 使用的匹配器实现，可用的实现：
# - succinct（默认，与规则集相同）
# - mph（来自 V2Ray，在 Xray 中也是 `hybrid`）
geosite-matcher: succinct

global-ua: clash.meta # 自定全局 UA
etag-support: true # 外部资源下载的 ETag 支持
# silent 静默，不输出
# error 仅输出发生错误至无法使用的日志
# warning 输出发生错误但不影响运行的日志，以及 error 级别内容
# info 输出一般运行的内容，以及 error 和 warning 级别的日志
# debug 尽可能的输出运行中所有的信息
log-level: info # 日志等级
ipv6: true # 启用 IPv6
#tls: # TLS 相关配置
#  certificate: string # TLS 证书
#  private-key: string # TLS 私钥
#  custom-certifactes: # 自定义证书
#    - |
#      -----BEGIN CERTIFICATE-----
#      format/pem...
#      -----END CERTIFICATE-----

external-controller: 0.0.0.0:9093 # 外部控制端口
#external-controller-tls: 0.0.0.0:9443 # TLS 外部控制端口
secret: "" # 控制接口密钥

# RESTful API CORS标头配置
external-controller-cors: # CORS 配置
  allow-origins: # 允许来源
    - http://localhost:*
    - http://127.0.0.1:*
  allow-private-network: true # 允许私有网络访问
#external-controller-unix: mihomo.sock  # Unix Socket 控制接口
#external-controller-pipe: \\.\pipe\mihomo  # Windows 管道接口

unified-delay: true # 开启统一延迟时
tcp-concurrent: true # 启用 TCP 并发连接
external-ui: ui # 外部 UI 目录
external-ui-name: xd # 外部 UI 名称
external-ui-url: "https://ghfast.top/github.com/Zephyruso/zashboard/releases/latest/download/dist.zip" # 外部 UI 下载链接
external-doh-server: /dns-query # 外部 DoH 服务器
#interface-name:  # 使用的网络接口名称
#routing-mark:  # 路由标记
global-client-fingerprint: chrome # 全局客户端指纹为 Chrome

# 缓解移动设备耗电问题
# https://github.com/vernesong/OpenClash/issues/2614
disable-keep-alive: true # 禁用 TCP Keep Alive，在 Android 默认为 true
keep-alive-idle: 15 # Keep-Alive 空闲时间 (单位: 秒)
keep-alive-interval: 15 # Keep-Alive 间隔时间 (单位: 秒)

# 实验性功能配置
experimental:
  quic-go-disable-gso: true # 禁用 QUIC 协议中的 GSO (Generic Segmentation Offload) 功能
  quic-go-disable-ecn: true #禁用ECN
  dialer-ip4p-convert: false # 启用IP4P地址转换

# 本地 DNS 解析配置
hosts:
  ntp.ntsc.ac.cn: 
    - 114.118.7.161
    - 114.118.7.163

# 缓存
profile:
  store-selected: true # 存储已选择的代理组
  store-fake-ip: true # 存储 Fake IP 地址

# 网络时间协议 (NTP) 设置
ntp:
  enable: false # 启用 NTP 功能
  write-to-system: false # 将同步的时间写入系统时钟，需root权限
  server: ntp.ntsc.ac.cn # NTP 服务器地址
  port: 123 # NTP 服务器端口，默认使用 123 端口
  interval: 30 # 同步时间的间隔 (单位: 分钟)

# sniffer 配置：用于检测和处理不同协议的流量
sniffer:
  enable: true # 是否启用 sniffer 侦测功能，默认关闭
  force-dns-mapping: true # 对 redir-host 类型识别的流量进行强制嗅探
  parse-pure-ip: true # 对所有未获取到域名的流量进行强制嗅探
  override-destination: false # 是否使用嗅探结果作为实际访问，默认为 true
  sniff:
    HTTP:
      ports: [80, 8080-8880] # 对 HTTP 流量进行嗅探的端口范围，常用于网站和应用
      override-destination: true # 覆盖目标地址以强制流量走代理或规则匹配
    TLS:
      ports: [443, 8443] # 对 HTTPS 流量的端口进行嗅探，通常用于加密连接
    QUIC:
      ports: [443, 8443] # 对 QUIC 协议的流量进行嗅探，QUI C 常用于改进 HTTPS 连接的速度
  force-domain:
    - "+.v2ex.com" # 对指定域名强制解析，即使 IP 地址已缓存或已知
  skip-domain:
    - Mijia.Cloud.com # 跳过指定域名，不对其进行嗅探处理（如智能家居流量）
  skip-src-address:
    - 192.168.0.3/32 # 跳过来源 IP 地址，不对其进行嗅探
  skip-dst-address:
    - 192.168.0.3/32 # 跳过目标 IP 地址，不对其进行嗅探

# tun 配置：用于启用 TUN 模式，优化流量路由和 IP 设置
tun:
  enable: true # 启用 TUN 模式，用于透明代理
  stack: gvisor # 使用空间网络栈处理流量，可用值： system/gvisor/mixed
  auto-route: true # 自动设置全局路由，可以自动将全局流量路由进入 tun 网卡。
#  auto-redirect: true # 自动配置 iptables/nftables 以重定向 TCP 连接, 需要auto-route已启用, 需要root权限
  auto-detect-interface: true # 自动选择流量出口接口，多出口网卡同时连接的设备建议手动指定出口网卡
  dns-hijack:
    - any:53 # 劫持所有 53 端口的 DNS 请求
  device: utun0 # 指定 TUN 设备名称，默认为 utun
  mtu: 1500 # 设置最大传输单元 (MTU)，提高网络吞吐量
  strict-route: true # 启用 auto-route 时执行严格的路由规则
  gso: true # 通用分段卸载 (GSO)，提高网络性能
  gso-max-size: 65536 # 设置 GSO 最大分段大小为 65536 字节
  udp-timeout: 300 # 设置 UDP 超时时间为 300 秒，优化 NAT 映射
#  iproute2-table-index: 2022 # 使用指定的路由表索引 (iproute2)
#  iproute2-rule-index: 9000 # 设置路由规则的索引 (iproute2)
  endpoint-independent-nat: false # 启用独立于端点的 NAT，性能可能会略有下降，所以不建议在不需要的时候开启

# DNS 配置：控制 DNS 查询行为，支持增强模式和假 IP 功能
# 查询 DNS 是否支持 H3 指令:
#  curl https://1.1.1.1/dns-query --http3-only -vI
#  q www.baidu.com @https://1.1.1.1/dns-query --http3
dns:
  enable: true # 启用 DNS 模块
  cache-algorithm: arc # 缓存算法，参数:lru 最近最少使用，arc 自适应替换缓存
  prefer-h3: false # DOH 优先使用 http/3
  use-hosts: true # 使用配置中的 hosts 文件条目
  use-system-hosts: true # 使用系统的 hosts 文件条目
  respect-rules: true # dns 连接遵守路由规则，需配置 proxy-server-nameserver, 强烈不建议和 prefer-h3 一起使用
  listen: 0.0.0.0:1053 # 本地 DNS 监听端口，默认是 1053 端口
  ipv6: true # 启用 IPv6 DNS 解析，避免 IPv6 地址的解析请求
  default-nameserver:
    - quic://223.5.5.5 # 阿里 DNS 解析 DNS 域名
    - quic://223.6.6.6 # 阿里 DNS 解析 DNS 域名
  enhanced-mode: fake-ip # 启用增强模式 redir-host or fake-ip
  fake-ip-range: 198.18.0.0/16 # fake-ip 池设置
  fake-ip-filter-mode: blacklist
  fake-ip-filter:
    - RULE-SET:Private,Fakeip_Filter
  nameserver-policy:
    github.akams.cn:
      - "quic://223.5.5.5"
      - "quic://223.6.6.6"
    "+.jp":
      - "https://public.dns.iij.jp/dns-query#h3=true" # IIJ （日本） DNS over H3
    "+.hk":
      - "quic://dns.nextdns.io" # NextDNS（香港） DNS over DOQ
    "+.eu":
      - "quic://dns0.eu" # 公共（欧洲） DNS over DOQ
    "RULE-SET:Private,China":
      - "quic://223.5.5.5" # 阿里 DNS over DOQ
      - "quic://223.6.6.6"
  nameserver:
    - "https://1.1.1.1/dns-query#h3=true" # Cloudflare DNS over H3
    - "https://1.0.0.1/dns-query#h3=true"
    - "https://8.8.8.8/dns-query#h3=true" # Google DNS over H3
    - "https://8.8.4.4/dns-query#h3=true"
    - "https://185.222.222.222/dns-query#h3=true" # SB DNS over H3
    - "https://45.11.45.11/dns-query#h3=true"
    - "quic://94.140.15.15" # AdGuard DNS over DOQ
    - "quic://94.140.14.140"
  proxy-server-nameserver: # 代理节点域名解析服务器，仅用于解析代理节点的域名
    - "quic://223.5.5.5" # 阿里 DNS over DOQ
    - "quic://223.6.6.6"
  direct-nameserver: #  用于直连出口域名解析的 DNS 服务器
    - "quic://223.5.5.5" # 阿里 DNS over DOQ
    - "quic://223.6.6.6"
  direct-nameserver-follow-policy: true # 是否遵循 nameserver-policy，默认为不遵守，仅当 direct-nameserver 不为空时生效

proxies:
  - name: "🎯全局直连"
    type: direct
  - name: "🚫拒绝连接"
    type: reject
proxy-groups:
  - { name: 🚀全球代理, type: select, proxies: [♻️自动选择, 🟢手动选择, ⚡️均衡负载, 🔯故障转移, 🎯全局直连, 🇭🇰香港自动, 🇹🇼台湾自动, 🇯🇵日本自动, 🇺🇸美国自动, 🇸🇬新加坡自动, 🇬🇧英国自动, 🇩🇪德国自动, 🇫🇷法国自动, 🇨🇦加拿大自动, 🇦🇺澳大利亚自动, 🇰🇷韩国自动, 🇷🇺俄罗斯自动, 🇳🇱荷兰自动, 🇮🇳印度自动, 🇲🇾马来西亚自动, 🇵🇱波兰自动, 🇪🇪爱沙尼亚自动, 🇦🇪阿联酋自动, 🇳🇬尼日利亚自动, 🇧🇬保加利亚自动, 🇸🇨塞舌尔自动, 🇪🇸西班牙自动, 🇻🇳越南自动, 🇸🇽荷属圣马丁自动, 🇲🇴澳门自动, 🇵🇭菲律宾自动, 🇹🇭泰国自动, 🇲🇳蒙古自动, 🇫🇮芬兰自动, 🇸🇪瑞典自动, 🇦🇹奥地利自动, 🇧🇷巴西自动, 🇰🇿哈萨克斯坦自动, 🇮🇱以色列自动, 🇦🇪阿拉伯联合酋长国自动,  🇨🇭瑞士自动, 🌐其它地区] }

  - { name: 🟢手动选择, <<: *u, type: select }

  - { name: 🪧广告拦截, type: select, include-all-providers: true, proxies: [🚫拒绝连接, 🚀全球代理, 🎯全局直连] }

  - { name: 🔎HttpDNS, type: select, include-all-providers: true, proxies: [🚫拒绝连接, 🚀全球代理, 🎯全局直连] }

  - { name: 💧泄漏拦截, type: select, include-all-providers: true, proxies: [🚫拒绝连接, 🚀全球代理, 🎯全局直连] }

  - { name: 🎯全球直连, type: select, include-all-providers: true, proxies: [🎯全局直连, 🚀全球代理] }

  - { name: ♻️自动选择, <<: *u, tolerance: 1, type: url-test }

  - { name: ⚡️均衡负载, <<: *u, strategy: round-robin, type: load-balance }

  - { name: 🔯故障转移, <<: *u, type: fallback }

  # 应用分组
  - { name: "115", <<: *direct, icon: https://cdn.jsdmirror.cn/gh/Kwisma/cf-worker-mihomo@main/icon/webp/100/115.webp }
  - { name: "12306", <<: *direct, icon: https://cdn.jsdmirror.cn/gh/Kwisma/cf-worker-mihomo@main/icon/webp/100/12306.webp }
  - { name: "4399", <<: *direct, icon: https://cdn.jsdmirror.cn/gh/Kwisma/cf-worker-mihomo@main/icon/webp/100/4399.webp }
  - { name: 4GTV, <<: *proxy, icon: https://cdn.jsdmirror.cn/gh/Kwisma/cf-worker-mihomo@main/icon/webp/100/4GTV.webp }
  - { name: 58同城, <<: *direct, icon: https://cdn.jsdmirror.cn/gh/Kwisma/cf-worker-mihomo@main/icon/webp/100/58TongCheng.webp }
  - { name: 农业银行, <<: *direct, icon: https://cdn.jsdmirror.cn/gh/Kwisma/cf-worker-mihomo@main/icon/webp/100/ABC.webp }
  - { name: AbemaTV, <<: *proxy, icon: https://cdn.jsdmirror.cn/gh/Kwisma/cf-worker-mihomo@main/icon/webp/100/Abema.webp }
  - { name: Adobe, <<: *proxy, icon: https://cdn.jsdmirror.cn/gh/Kwisma/cf-worker-mihomo@main/icon/webp/100/Adobe.webp }
  - { name: 支付宝, <<: *direct, icon: https://cdn.jsdmirror.cn/gh/Kwisma/cf-worker-mihomo@main/icon/webp/100/AliPay.webp }
  - { name: 阿里巴巴, <<: *direct, icon: https://cdn.jsdmirror.cn/gh/Kwisma/cf-worker-mihomo@main/icon/webp/100/Alibaba.webp }
  - { name: 亚马逊电商, <<: *proxy, icon: https://cdn.jsdmirror.cn/gh/Kwisma/cf-worker-mihomo@main/icon/webp/100/AmazonShopping.webp }
  - { name: 亚马逊TV, <<: *proxy, icon: https://cdn.jsdmirror.cn/gh/Kwisma/cf-worker-mihomo@main/icon/webp/100/AmazonPrimeVideo.webp }
  - { name: Apple, <<: *proxy, icon: https://cdn.jsdmirror.cn/gh/Kwisma/cf-worker-mihomo@main/icon/webp/100/Apple.webp }
  - { name: AppleCN, <<: *direct, icon: https://cdn.jsdmirror.cn/gh/Kwisma/cf-worker-mihomo@main/icon/webp/100/AppleCN.webp }
  - { name: AppStore, <<: *proxy, icon: https://cdn.jsdmirror.cn/gh/Kwisma/cf-worker-mihomo@main/icon/webp/100/AppStore.webp }
  - { name: Apple邮箱, <<: *proxy, icon: https://cdn.jsdmirror.cn/gh/Kwisma/cf-worker-mihomo@main/icon/webp/100/AppleMail.webp }
  - { name: Apple音乐, <<: *proxy, icon: https://cdn.jsdmirror.cn/gh/Kwisma/cf-worker-mihomo@main/icon/webp/100/AppleMusic.webp }
  - { name: Apple新闻, <<: *proxy, icon: https://cdn.jsdmirror.cn/gh/Kwisma/cf-worker-mihomo@main/icon/webp/100/AppleNews.webp }
  - { name: Apple日报, <<: *proxy, icon: https://cdn.jsdmirror.cn/gh/Kwisma/cf-worker-mihomo@main/icon/webp/100/AppleDaily.webp }
  - { name: AppleTV, <<: *proxy, icon: https://cdn.jsdmirror.cn/gh/Kwisma/cf-worker-mihomo@main/icon/webp/100/AppleTV.webp }
  - { name: 巴哈姆特, <<: *proxy, icon: https://cdn.jsdmirror.cn/gh/Kwisma/cf-worker-mihomo@main/icon/webp/100/Bahamut.webp }
  - { name: 百度贴吧, <<: *direct, icon: https://cdn.jsdmirror.cn/gh/Kwisma/cf-worker-mihomo@main/icon/webp/100/BaiDuTieBa.webp }
  - { name: 百度, <<: *direct, icon: https://cdn.jsdmirror.cn/gh/Kwisma/cf-worker-mihomo@main/icon/webp/100/Baidu.webp }
  - { name: 哔哩哔哩, <<: *direct, icon: https://cdn.jsdmirror.cn/gh/Kwisma/cf-worker-mihomo@main/icon/webp/100/BiliBili.webp }
  - { name: 哔哩东南亚, <<: *proxy, icon: https://cdn.jsdmirror.cn/gh/Kwisma/cf-worker-mihomo@main/icon/webp/100/Biliintl.webp }
  - { name: BT追踪器, <<: *direct, icon: https://cdn.jsdmirror.cn/gh/Kwisma/cf-worker-mihomo@main/icon/webp/100/BitTorrent.webp }
  - { name: 暴雪, <<: *proxy, icon: https://cdn.jsdmirror.cn/gh/Kwisma/cf-worker-mihomo@main/icon/webp/100/Blizzard.webp }
  - { name: 字节跳动, <<: *direct, icon: https://cdn.jsdmirror.cn/gh/Kwisma/cf-worker-mihomo@main/icon/webp/100/ByteDance.webp }
  - { name: Beats, <<: *direct, icon: https://cdn.jsdmirror.cn/gh/Kwisma/cf-worker-mihomo@main/icon/webp/100/Beats.webp }
  - { name: CCTV, <<: *direct, icon: https://cdn.jsdmirror.cn/gh/Kwisma/cf-worker-mihomo@main/icon/webp/100/CCTV.webp }
  - { name: 中国媒体, <<: *direct, icon: https://cdn.jsdmirror.cn/gh/Kwisma/cf-worker-mihomo@main/icon/webp/100/ChinaTV.webp }
  - { name: Cloudflare, <<: *proxy, icon: https://cdn.jsdmirror.cn/gh/Kwisma/cf-worker-mihomo@main/icon/webp/100/Cloudflare.webp }
  - { name: 钉钉, <<: *direct, icon: https://cdn.jsdmirror.cn/gh/Kwisma/cf-worker-mihomo@main/icon/webp/100/DingTalk.webp }
  - { name: Discord, <<: *proxy, icon: https://cdn.jsdmirror.cn/gh/Kwisma/cf-worker-mihomo@main/icon/webp/100/Discord.webp }
  - { name: Disney, <<: *proxy, icon: https://cdn.jsdmirror.cn/gh/Kwisma/cf-worker-mihomo@main/icon/webp/100/Disney+.webp }
  - { name: Docker, <<: *proxy, icon: https://cdn.jsdmirror.cn/gh/Kwisma/cf-worker-mihomo@main/icon/webp/100/Docker.webp }
  - { name: 豆瓣, <<: *direct, icon: https://cdn.jsdmirror.cn/gh/Kwisma/cf-worker-mihomo@main/icon/webp/100/DouBan.webp }
  - { name: E站, <<: *proxy, icon: https://cdn.jsdmirror.cn/gh/Kwisma/cf-worker-mihomo@main/icon/webp/100/E-Hentai.webp }
  - { name: EA, <<: *proxy, icon: https://cdn.jsdmirror.cn/gh/Kwisma/cf-worker-mihomo@main/icon/webp/100/EA.webp }
  - { name: Epic, <<: *proxy, icon: https://cdn.jsdmirror.cn/gh/Kwisma/cf-worker-mihomo@main/icon/webp/100/Epic.webp }
  - { name: Emby, <<: *proxy, icon: https://cdn.jsdmirror.cn/gh/Kwisma/cf-worker-mihomo@main/icon/webp/100/Emby.webp }
  - { name: FCM, <<: *proxy, icon: https://cdn.jsdmirror.cn/gh/Kwisma/cf-worker-mihomo@main/icon/webp/100/FCM.webp }
  - { name: Facebook, <<: *proxy, icon: https://cdn.jsdmirror.cn/gh/Kwisma/cf-worker-mihomo@main/icon/webp/100/Facebook.webp }
  - { name: Fastly, <<: *proxy, icon: https://cdn.jsdmirror.cn/gh/Kwisma/cf-worker-mihomo@main/icon/webp/100/Fastly.webp }
  - { name: FitnessPlus, <<: *direct, icon: https://cdn.jsdmirror.cn/gh/Kwisma/cf-worker-mihomo@main/icon/webp/100/FitnessPlus.webp }
  - { name: 高德, <<: *direct, icon: https://cdn.jsdmirror.cn/gh/Kwisma/cf-worker-mihomo@main/icon/webp/100/GaoDe.webp }
  - { name: GitHub, <<: *proxy, icon: https://cdn.jsdmirror.cn/gh/Kwisma/cf-worker-mihomo@main/icon/webp/100/GitHub.webp }
  - { name: Google, <<: *proxy, icon: https://cdn.jsdmirror.cn/gh/Kwisma/cf-worker-mihomo@main/icon/webp/100/Google.webp }
  - { name: Google云盘, <<: *proxy, icon: https://cdn.jsdmirror.cn/gh/Kwisma/cf-worker-mihomo@main/icon/webp/100/GoogleDrive.webp }
  - { name: Google地图, <<: *proxy, icon: https://cdn.jsdmirror.cn/gh/Kwisma/cf-worker-mihomo@main/icon/webp/100/GoogleEarth.webp }
  - { name: GoogleVoice, <<: *proxy, icon: https://cdn.jsdmirror.cn/gh/Kwisma/cf-worker-mihomo@main/icon/webp/100/GoogleVoice.webp }
  - { name: Hoyoverse, <<: *proxy, icon: https://cdn.jsdmirror.cn/gh/Kwisma/cf-worker-mihomo@main/icon/webp/100/HoYoverse.webp }
  - { name: Hulu, <<: *proxy, icon: https://cdn.jsdmirror.cn/gh/Kwisma/cf-worker-mihomo@main/icon/webp/100/Hulu.webp }
  - { name: 虎扑, <<: *direct, icon: https://cdn.jsdmirror.cn/gh/Kwisma/cf-worker-mihomo@main/icon/webp/100/Hupu.webp }
  - { name: HBO, <<: *proxy, icon: https://cdn.jsdmirror.cn/gh/Kwisma/cf-worker-mihomo@main/icon/webp/100/HBO.webp }
  - { name: IMDB, <<: *proxy, icon: https://cdn.jsdmirror.cn/gh/Kwisma/cf-worker-mihomo@main/icon/webp/100/IMDB.webp }
  - { name: 爱奇艺, <<: *direct, icon: https://cdn.jsdmirror.cn/gh/Kwisma/cf-worker-mihomo@main/icon/webp/100/IQIYI.webp }
  - { name: Instagram, <<: *proxy, icon: https://cdn.jsdmirror.cn/gh/Kwisma/cf-worker-mihomo@main/icon/webp/100/Instagram.webp }
  - { name: 因特尔, <<: *proxy, icon: https://cdn.jsdmirror.cn/gh/Kwisma/cf-worker-mihomo@main/icon/webp/100/Intel.webp }
  - { name: iCloud, <<: *direct, icon: https://cdn.jsdmirror.cn/gh/Kwisma/cf-worker-mihomo@main/icon/webp/100/iCloud.webp }
  - { name: 京东, <<: *direct, icon: https://cdn.jsdmirror.cn/gh/Kwisma/cf-worker-mihomo@main/icon/webp/100/JingDong.webp }
  - { name: 酷狗, <<: *direct, icon: https://cdn.jsdmirror.cn/gh/Kwisma/cf-worker-mihomo@main/icon/webp/100/Kugou.webp }
  - { name: 酷我, <<: *direct, icon: https://cdn.jsdmirror.cn/gh/Kwisma/cf-worker-mihomo@main/icon/webp/100/Kuwo.webp }
  - { name: LastFM, <<: *proxy, icon: https://cdn.jsdmirror.cn/gh/Kwisma/cf-worker-mihomo@main/icon/webp/100/LastFM.webp }
  - { name: LINE, <<: *proxy, icon: https://cdn.jsdmirror.cn/gh/Kwisma/cf-worker-mihomo@main/icon/webp/100/Line.webp }
  - { name: 美团, <<: *direct, icon: https://cdn.jsdmirror.cn/gh/Kwisma/cf-worker-mihomo@main/icon/webp/100/MeiTuan.webp }
  - { name: 微软, <<: *direct, icon: https://cdn.jsdmirror.cn/gh/Kwisma/cf-worker-mihomo@main/ic