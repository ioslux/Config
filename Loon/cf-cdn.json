{"name":"cf-cdn","displayName":"CF CDN","form":"","mergeSources":"","ignoreFailedRemoteSub":true,"icon":"https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/Cloudflare.png","process":[{"type":"Quick Setting Operator","args":{"useless":"DISABLED","udp":"DEFAULT","scert":"DEFAULT","tfo":"DEFAULT","vmess aead":"DEFAULT"}},{"type":"Regex Filter","args":{"keep":false,"regex":["^(#|\\/\\/)"]},"id":"57411289.51513343"},{"type":"Script Operator","args":{"content":"// HTTP ports supported by Cloudflare: 80, 8080, 8880, 2052, 2082, 2086, 2095\n// HTTPS ports supported by Cloudflare 443, 2053, 2083, 2087, 2096, 8443\nasync function operator(proxies) {\n  // 浏览器查看 https://cf.090227.xyz 获取更多优选 例如移动 https://addressesapi.090227.xyz/cmcc https://cm.xxxxxxxx.tk\n  // 直接写在本地(兼容如下格式, 支持注释)\n  const SERVERS_LOCAL = `\n    cf.zhetengsha.eu.org:2096#CF\n    cf.090227.xyz:2087#CM\n    // www.wto.org:8443#官方优选 WTO \n    // www.visa.com.sg#官方优选 Visa \n    // icook.hk\n    // 47.236.116.182#SG Alibaba\n    // 43.153.80.208:443#US Tencent\n    // 47.254.66.75:443#US Alibaba\n    // 8.219.144.168:443#SG Alibaba\n    // 8.222.181.139:443#SG Alibaba\n  `\n  // 从远程加载(若有, 就跟本地的叠加)\n  const SERVERS_REMOTE = '' // 如: `https://cu.xxxxxxxx.tk`\n\n  // 彩蛋\n  const EASTER_EGG = false\n\n  // proxyIP\n  // 直接写在本地\n  const PROXYIP_LOCAL = `\n    // 格式: proxyIP#名称\n    // 支持注释\n    // CMLiu 佬维护\n    # proxyip.us.fxxk.dedyn.io#US\n    # proxyip.sg.fxxk.dedyn.io#SG\n    # proxyip.jp.fxxk.dedyn.io#JP\n    // proxyip.hk.fxxk.dedyn.io#HK\n    // proxyip.aliyun.fxxk.dedyn.io#Alibaba\n    # proxyip.oracle.fxxk.dedyn.io#Oracle\n    # proxyip.digitalocean.fxxk.dedyn.io#DO\n    # proxyip.vultr.fxxk.dedyn.io#Vultr\n    \n    // Mingyu 维护\n    # bestproxy.onecf.eu.org#Mingyu\n    // my-telegram-is-herocore.onecf.eu.org#Mingyu\n\n    // 天诚 维护\n    // us.gitgoogle.com#US\n    # aliyun.gitgoogle.com#Alibaba\n    # oracle.gitgoogle.com#Oracle\n    # collect.gitgoogle.com#Telegram 收集\n\n    // workers.cloudflare.cyou#白嫖哥\n\n    // 43.153.80.208:443#US Tencent\n    // 47.254.66.75:443#US Alibaba\n    // 47.243.179.249:443#HK Alibaba\n    // 8.218.149.193:443#HK Alibaba\n    // 8.219.144.168:443#SG Alibaba\n    // 8.222.181.139:443#SG Alibaba\n    // 8.219.140.63:443#SG Alibaba\n    // 8.222.208.38:443#SG Alibaba\n    // 8.222.199.55:443#SG Alibaba\n    // 64.110.88.46:443#JP Oracle\n\n    // proxy.cf.zhetengsha.eu.org#Proxy\n    // us.cf.zhetengsha.eu.org#US\n    sg.cf.zhetengsha.eu.org#SG\n    hk.cf.zhetengsha.eu.org#HK\n    // jp.cf.zhetengsha.eu.org#JP\n\n    // cdn.xn--b6gac.eu.org#↗↘↗\n\n\n  `\n  // 从远程加载(若有, 就跟本地的叠加)\n  const PROXYIP_REMOTE = ''\n\n  // 使用 SOCKS5 而不是 PROXYIP  \n  // 需使用支持 SOCKS5 的 Workers/Pages 版本\n  // 如: https://github.com/cmliu/epeius\n  // 若有本地+远程叠加后, 存在有效的 SOCKS5 代理, 将忽略 PROXYIP\n  const SOCKS5_LOCAL = `\n  // 格式: user:pass@host:port 或 host:port\n  // user:pass@1.2.3.4:1234#名称\n  `\n  // 从远程加载(若有, 就跟本地的叠加)\n  const SOCKS5_REMOTE = '' // 例如 `https://raw.githubusercontent.com/proxifly/free-proxy-list/main/proxies/protocols/socks5/data.json` 没有统一格式, 目前下面的逻辑仅支持从这个格式中读取\n  const SOCKS5_REMOTE_COUNTRIES = ['SG'] // 筛选这些\n\n  //\n  const $ = $substore\n  let servers = `${SERVERS_LOCAL || ''}`\n  if (SERVERS_REMOTE) {\n    try {\n      const { body } = await $.http.get({ url: SERVERS_REMOTE })\n      servers = `${servers}\\n${body || ''}`\n    } catch (e) {\n      $.error(`从远程 ${SERVERS_REMOTE} 获取失败\\n${e.message ?? e}`)\n    }\n  }\n\n  const set = new Set()\n  servers.split(/\\r?\\n/g).map(i => {\n    const [_, server, __, port, ___, name] = i.trim().match(/^(.*?)(:(\\d+))?(#(.*?))?$/)\n    if (server && !/^(#|\\/\\/)/.test(server)) set.add({ server: clearServer(server), port, name })\n  })\n\n  if (EASTER_EGG) {\n    const EASTER_EGG_REMOTE = 'https://trojan.gitgoogle.com/CMLiu'\n    try {\n      let { body } = await $.http.get({ url: EASTER_EGG_REMOTE, headers: { 'User-Agent': 'sing-box' } })\n      body = JSON.parse(body)\n      body.outbounds.map(({ tag: name, server, server_port: port }) => {\n        if (server && port) set.add({ server: clearServer(server), port, name: ProxyUtils.getISO(name) })\n      })\n    } catch (e) {\n      $.error(`从远程 ${EASTER_EGG_REMOTE} 获取失败\\n${e.message ?? e}`)\n    }\n  }\n  let list = []\n\n  \n  const socks5set = new Set()\n  SOCKS5_LOCAL.split(/\\r?\\n/g).map(i => {\n    const [_, proxy, __, name] = i.trim().match(/^(.*?)(#(.*?))?$/)\n    if (proxy && !/^(#|\\/\\/)/.test(proxy)) socks5set.add({ proxy, name })\n  })\n  if (SOCKS5_REMOTE) {\n    try {\n      let { body } = await $.http.get({ url: SOCKS5_REMOTE })\n      body = JSON.parse(body)\n      body.map(({ ip, port, geolocation } = {}) => {\n        if (ip && port && SOCKS5_REMOTE_COUNTRIES.includes(geolocation?.country)) socks5set.add({ proxy: `${ip}:${port}`, name: geolocation?.country })\n      })\n    } catch (e) {\n      $.error(`从远程 ${SOCKS5_REMOTE} 获取失败\\n${e.message ?? e}`)\n    }\n  }\n  list = Array.from(socks5set)\n  const socks5enabled = list.length > 0\n\n  if (!socks5enabled) {\n    let proxyIPs = `${PROXYIP_LOCAL || ''}`\n    if (PROXYIP_REMOTE) {\n      try {\n        const { body } = await $.http.get({ url: PROXYIP_REMOTE })\n        proxyIPs = `${proxyIPs}\\n${body || ''}`\n      } catch (e) {\n        $.error(`从远程 ${PROXYIP_REMOTE} 获取失败\\n${e.message ?? e}`)\n      }\n    }\n    const proxyIPset = new Set()\n    proxyIPs.split(/\\r?\\n/g).map(i => {\n      const [_, server, __, port, ___, name] = i.trim().match(/^(.*?)(:(\\d+))?(#(.*?))?$/)\n      if (server && !/^(#|\\/\\/)/.test(server)) proxyIPset.add({ server: clearServer(server), name })\n    })\n    list = Array.from(proxyIPset)\n  }\n\n  // HTTP ports supported by Cloudflare: 80, 8080, 8880, 2052, 2082, 2086, 2095\n  // HTTPS ports supported by Cloudflare 443, 2053, 2083, 2087, 2096, 8443\n\n  let result = []\n  Array.from(set).map(({ server, port, name }) => {\n    list.map(item => {\n      proxies.map(p => {\n        result.push({\n          ...p,\n          name: `${name ? name : server} ➮ ${item.name} ${p.name}`,\n          server,\n          port: parseInt(port || p.port, 10),\n          'skip-cert-verify': true,\n          'ws-opts': {\n            ...p['ws-opts'],\n            path: socks5enabled ? `/?socks5=${item.proxy}` : `/proxyIP=${item.server}`,\n          },\n        })\n      })\n    })\n  })\n\n  return result\n\n  function clearServer(server) {\n    return `${server}`.trim().replace(/^\\[/, '').replace(/\\]$/, '')\n  }\n}\n","mode":"script"},"id":"43662099.46997681"},{"type":"Handle Duplicate Operator","args":{"action":"rename","position":"back","template":"⁰ ¹ ² ³ ⁴ ⁵ ⁶ ⁷ ⁸ ⁹","link":""},"id":"15529897.084454225"}],"source":"local","url":"","content":"\nWorkers=trojan,______.com,443,password=______________________,ws=true,ws-path=/proxyIP=proxyip.aliyun.fxxk.dedyn.io,ws-headers=Host:\"______.com\",tls=true,sni=______.com,skip-cert-verify=true,tfo=true","ua":"","tag":["CF"],"display-name":"CF CDN","proxy":""}